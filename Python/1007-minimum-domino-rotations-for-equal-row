class Solution:
    def helper(self, A, B):
        first, count1 = A[0], 0
        for i in range(1, len(A)):
            if A[i] != first:
                if B[i] != first:
                    count1 = None
                    break
                else:
                    count1 += 1
        count2 = 0
        if A[0] != B[0]:
            first = B[0]
            for i in range(len(A)):
                if A[i] != first:
                    if B[i] != first:
                        count2 = None
                        break
                    else:
                        count2 += 1
        else:
            count2 = count1
        if not count1 and not count2:            
            return -1
        if count1 and count2:
            return min(count1, count2)
        if count1:
            return count1
        return count2
    
    def equal(self, arr):
        temp = arr[0]
        for i in range(1, len(arr)):
            if arr[i] != temp:
                return False
        return True
        
    def minDominoRotations(self, A: List[int], B: List[int]) -> int:
        if self.equal(A) or self.equal(B):
            return 0
        first, second = self.helper(A, B), self.helper(B, A)
        if first and second:
            return min(first, second)
        if first:
            return first
        return second